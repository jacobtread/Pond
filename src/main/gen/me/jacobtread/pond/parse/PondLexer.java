/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package me.jacobtread.pond.parse;

import java.io.*;
import java.util.LinkedList;
import me.jacobtread.pond.util.Keyboard;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>PondLexer.flex</tt>
 */
public class PondLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int VARIABLE = 2;
  public static final int STRING = 4;
  public static final int WAIT = 6;
  public static final int DEFAULT_WAIT = 8;
  public static final int MACRO = 10;
  public static final int MACRO_ARGS = 12;
  public static final int MACRO_INVOKE = 14;
  public static final int MACRO_ARGS_INVOKE = 16;
  public static final int REPEAT = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17408 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\7\1\10\1\11\1\13\1\14"+
    "\3\0\1\15\1\16\1\17\1\20\2\21\1\22\3\21\1\22\7\21\1\23\10\21\1\24\50\21\1"+
    "\25\1\21\1\26\1\27\1\30\1\31\2\27\16\0\1\32\1\33\1\34\1\35\2\21\1\36\11\21"+
    "\1\37\21\21\1\40\1\41\24\21\1\42\3\21\1\22\1\43\1\42\4\21\1\44\1\45\4\0\1"+
    "\46\1\47\1\27\3\21\2\50\1\27\1\51\1\52\1\0\1\53\5\21\1\54\3\0\1\55\1\56\13"+
    "\21\1\57\1\46\1\60\1\61\1\0\1\62\1\27\1\63\1\64\3\21\3\0\1\65\12\21\1\66\1"+
    "\0\1\67\1\27\1\0\1\70\3\21\1\54\1\71\1\20\2\21\1\66\1\72\1\73\1\74\2\27\3"+
    "\21\1\75\1\21\1\50\6\27\2\21\1\32\1\76\2\27\1\77\5\0\1\100\6\21\1\101\2\0"+
    "\1\102\1\21\1\103\1\0\1\42\1\21\1\104\1\105\1\106\2\21\1\107\1\110\1\111\1"+
    "\112\1\113\1\63\1\114\1\103\1\0\1\115\1\116\1\117\1\120\1\106\2\21\1\107\1"+
    "\121\1\122\1\123\1\124\1\125\1\126\1\127\1\0\1\130\1\27\1\117\1\37\1\36\2"+
    "\21\1\107\1\131\1\111\1\46\1\132\1\133\1\27\1\103\1\0\1\43\1\134\1\117\1\105"+
    "\1\106\2\21\1\107\1\131\1\111\1\112\1\124\1\127\1\114\1\103\1\0\1\43\1\27"+
    "\1\135\1\136\1\137\1\140\1\116\1\136\1\21\1\141\1\142\1\143\1\144\1\27\1\127"+
    "\1\0\1\27\1\43\1\145\1\32\1\107\2\21\1\107\1\21\1\146\1\147\1\143\1\150\1"+
    "\50\1\103\1\0\2\27\1\104\1\32\1\107\2\21\1\107\1\151\1\111\1\147\1\143\1\150"+
    "\1\34\1\103\1\0\1\152\1\27\1\145\1\32\1\107\4\21\1\153\1\147\1\154\1\155\1"+
    "\44\1\103\1\0\1\27\1\41\1\156\1\21\1\22\1\41\2\21\1\36\1\157\1\22\1\160\1"+
    "\161\1\0\1\127\1\0\1\162\1\27\1\42\5\21\1\163\1\164\1\165\1\166\1\0\1\167"+
    "\4\27\1\170\1\171\1\172\1\42\1\173\1\174\1\163\1\175\1\176\1\51\1\0\1\177"+
    "\4\27\1\133\2\27\1\167\1\0\1\167\1\200\1\201\1\21\1\42\3\21\1\30\1\45\1\0"+
    "\1\147\1\202\1\0\1\45\3\0\1\203\1\204\7\27\5\21\1\54\1\0\1\205\1\0\1\167\1"+
    "\66\1\206\1\207\1\210\1\211\1\21\1\212\1\213\1\0\1\51\4\21\1\37\1\17\5\21"+
    "\1\214\51\21\1\137\1\22\1\137\5\21\1\137\4\21\1\137\1\22\1\137\1\21\1\22\7"+
    "\21\1\137\10\21\1\215\4\27\2\21\2\27\12\21\2\76\1\42\114\21\1\105\2\21\1\42"+
    "\2\21\1\50\11\21\1\136\1\21\1\133\1\21\1\32\1\216\1\27\2\21\1\216\1\27\2\21"+
    "\1\217\1\27\1\21\1\32\1\220\1\27\6\21\1\221\3\0\1\222\1\223\1\0\1\167\3\27"+
    "\1\224\1\0\1\167\13\21\1\27\1\225\4\21\1\226\10\21\1\76\1\27\3\21\1\22\1\0"+
    "\1\2\1\0\1\2\1\127\1\0\3\21\1\76\1\30\1\27\5\21\1\115\3\21\1\26\1\0\1\167"+
    "\4\27\2\21\1\165\1\2\6\21\1\202\1\166\3\0\1\112\1\0\1\167\1\0\1\167\1\44\1"+
    "\27\1\0\1\51\10\27\1\227\5\21\1\221\1\0\1\227\1\115\1\0\1\167\1\27\1\230\1"+
    "\2\1\27\1\231\3\21\1\102\1\210\1\0\1\70\4\21\1\66\1\0\1\2\1\27\4\21\1\221"+
    "\2\0\1\27\1\0\1\232\1\0\1\70\3\21\1\76\1\21\1\133\10\27\1\233\2\0\1\234\1"+
    "\235\1\167\30\21\7\0\1\236\42\21\2\76\4\21\2\76\1\21\1\237\3\21\1\76\6\21"+
    "\1\32\1\176\1\240\1\30\1\241\1\115\1\21\1\30\1\240\1\30\1\27\1\230\3\27\1"+
    "\242\1\27\1\44\1\133\1\27\1\243\1\27\1\147\1\0\1\43\1\44\2\27\1\21\1\30\4"+
    "\21\2\27\1\0\1\203\1\244\1\0\1\245\1\27\1\246\1\41\1\157\1\247\1\31\1\250"+
    "\1\21\1\251\1\252\1\253\2\27\5\21\1\133\116\27\5\21\1\22\5\21\1\22\20\21\1"+
    "\30\1\254\1\255\1\27\4\21\1\37\1\17\7\21\1\44\1\27\1\63\2\21\1\22\1\27\10"+
    "\22\4\0\5\27\1\44\72\27\1\252\3\27\1\42\1\212\1\247\1\30\1\42\11\21\1\22\1"+
    "\256\1\42\12\21\1\214\1\252\4\21\1\22\1\42\12\21\1\22\2\27\3\21\1\50\6\27"+
    "\170\21\1\76\11\27\75\21\1\50\2\27\21\21\1\30\10\27\5\21\1\76\41\21\1\30\2"+
    "\21\1\0\1\255\2\27\5\21\1\165\1\77\1\257\3\21\1\66\12\21\1\167\3\27\1\44\1"+
    "\21\1\41\14\21\1\106\3\21\1\22\1\21\7\27\1\44\1\21\1\260\1\261\2\21\1\54\2"+
    "\27\1\133\6\21\1\115\1\27\1\70\5\21\1\221\1\0\1\51\1\27\1\0\1\167\2\0\1\70"+
    "\1\262\1\0\1\70\2\21\1\66\1\51\2\21\1\165\1\0\1\2\1\27\3\21\1\30\1\100\5\21"+
    "\1\54\1\0\1\245\1\44\1\0\1\167\1\263\1\21\1\0\1\264\5\21\1\102\1\166\1\27"+
    "\1\261\1\265\1\0\1\167\2\21\1\22\1\266\6\21\1\207\1\267\1\226\2\27\1\270\1"+
    "\21\1\54\1\271\1\27\3\272\1\27\2\22\5\21\1\214\1\76\1\27\16\21\1\54\1\273"+
    "\1\0\1\167\64\21\1\115\1\27\2\21\1\22\1\274\5\21\1\115\40\27\55\21\1\76\15"+
    "\21\1\26\4\27\1\22\1\27\1\274\1\275\1\21\1\107\1\22\1\176\1\276\15\21\1\26"+
    "\3\27\1\274\54\21\1\76\2\27\10\21\1\41\6\21\5\27\1\21\1\30\2\0\2\27\2\0\1"+
    "\116\2\27\1\252\3\27\1\43\1\32\20\21\1\277\1\243\1\27\1\0\1\167\1\42\2\21"+
    "\1\120\1\42\2\21\1\50\1\300\12\21\1\22\3\41\1\301\1\302\2\27\1\303\1\21\1"+
    "\151\2\21\1\22\2\21\1\304\1\21\1\76\1\21\1\76\4\27\17\21\1\50\10\27\6\21\1"+
    "\30\20\27\1\305\20\27\3\21\1\30\6\21\1\133\1\27\1\245\3\27\4\21\1\27\1\252"+
    "\3\21\1\50\4\21\1\66\1\306\3\21\1\76\4\21\1\115\1\21\1\247\5\27\23\21\1\76"+
    "\1\0\1\167\4\21\1\115\4\21\1\115\5\21\1\27\6\21\1\115\23\27\46\21\1\22\1\27"+
    "\2\21\1\76\1\27\1\21\23\27\1\76\1\107\4\21\1\37\1\307\2\21\1\76\1\27\2\21"+
    "\1\22\1\27\3\21\1\22\10\27\2\21\1\310\1\27\2\21\1\76\1\27\3\21\1\26\10\27"+
    "\7\21\1\300\10\27\1\311\1\77\1\151\1\42\2\21\1\115\1\123\4\27\3\21\1\30\3"+
    "\21\1\30\4\27\1\21\1\42\2\21\1\312\3\27\6\21\1\76\1\27\2\21\1\76\1\27\2\21"+
    "\1\50\1\27\2\21\1\26\15\27\11\21\1\133\6\27\6\21\1\50\1\27\6\21\1\50\41\27"+
    "\1\231\6\21\1\0\1\166\3\27\1\127\1\0\1\27\1\63\1\231\5\21\1\0\1\313\2\27\3"+
    "\21\1\133\1\0\1\167\1\231\3\21\1\165\1\0\1\147\1\0\2\27\4\21\1\314\1\27\1"+
    "\231\5\21\1\54\1\0\1\315\1\316\1\0\1\317\4\27\2\21\1\36\2\21\1\221\1\0\1\204"+
    "\10\27\1\22\1\250\1\21\1\37\1\21\1\133\5\21\1\165\1\0\1\306\1\0\1\167\1\145"+
    "\1\105\1\106\2\21\1\107\1\131\1\111\1\112\1\124\1\144\1\252\1\103\2\203\21"+
    "\27\6\21\1\202\1\0\1\205\1\50\1\0\1\167\4\27\6\21\2\0\1\320\1\27\1\0\1\167"+
    "\24\27\5\21\1\165\1\51\1\0\1\245\2\27\1\265\4\27\6\21\2\0\1\321\1\27\1\0\1"+
    "\167\4\27\5\21\1\54\1\0\1\27\1\0\1\167\6\27\3\21\1\322\1\0\1\2\1\0\1\167\54"+
    "\27\10\21\1\0\1\167\1\27\1\44\40\27\1\102\1\231\4\21\1\54\1\323\1\63\1\27"+
    "\1\102\1\100\4\21\1\241\1\212\1\0\1\167\4\27\7\21\1\133\40\27\1\21\1\107\3"+
    "\21\1\165\1\166\1\0\1\133\1\27\1\0\1\167\2\27\1\41\3\21\1\324\2\0\1\45\1\166"+
    "\11\27\1\22\1\36\4\21\1\325\1\326\1\213\1\27\1\0\1\167\24\27\63\21\1\26\14"+
    "\27\15\21\1\22\2\27\30\21\1\115\27\27\5\21\1\22\72\27\10\21\1\22\67\27\7\21"+
    "\1\133\3\21\1\22\1\0\1\167\14\27\3\21\1\76\1\203\1\27\6\21\1\166\1\27\1\115"+
    "\1\27\1\0\1\167\1\274\2\21\1\252\2\21\56\27\10\21\1\30\1\27\1\102\4\0\1\166"+
    "\1\27\1\63\1\231\1\21\10\27\1\26\3\27\75\21\1\30\2\27\36\21\1\50\41\27\43"+
    "\21\1\22\12\27\61\21\1\115\40\27\15\21\1\50\1\21\1\30\1\21\1\133\1\21\1\327"+
    "\1\2\127\27\1\330\1\331\2\0\1\332\1\2\3\27\1\333\22\27\1\316\67\27\12\21\1"+
    "\32\10\21\1\32\1\334\1\335\1\21\1\336\1\151\7\21\1\37\1\337\2\32\3\21\1\340"+
    "\1\176\1\41\1\107\51\21\1\76\3\21\1\107\2\21\1\214\3\21\1\214\2\21\1\32\3"+
    "\21\1\32\2\21\1\22\3\21\1\22\3\21\1\107\3\21\1\107\2\21\1\214\1\341\14\0\1"+
    "\166\1\230\5\0\1\203\1\305\1\27\1\342\2\27\1\230\1\45\1\0\52\27\1\166\2\0"+
    "\1\343\1\344\1\306\72\27\30\21\1\30\1\27\1\166\5\27\10\21\1\221\1\306\1\0"+
    "\1\167\24\27\1\151\3\21\1\170\1\42\1\214\1\345\1\246\1\346\1\170\1\237\1\170"+
    "\2\214\1\126\1\21\1\36\1\21\1\115\1\347\1\36\1\21\1\115\50\27\32\21\1\22\5"+
    "\27\106\21\1\30\1\27\33\21\1\76\120\21\1\26\1\27\146\21\1\133\3\27\3\21\1"+
    "\76\74\27\1\125\3\27\14\0\20\27\36\0\2\27");

  /* The ZZ_CMAP_A table has 1856 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\31\1\2\1\27\1\36\1\37\1\36\6\31\4\0\1\2\2\0\1\33\1\32\5\0\1\35\2\0\1\30"+
    "\1\0\1\34\12\1\1\25\6\0\1\7\1\30\1\22\1\11\1\4\1\12\1\20\1\30\1\10\2\30\1"+
    "\14\1\21\1\17\1\23\1\24\1\30\1\16\1\3\1\5\1\13\1\30\1\6\3\30\4\0\1\15\3\30"+
    "\1\0\1\26\2\0\6\31\1\40\2\31\2\0\4\30\4\0\1\30\2\0\1\31\7\0\1\30\4\0\1\30"+
    "\5\0\17\30\1\0\2\10\15\30\1\3\2\30\4\0\4\30\16\0\5\30\7\0\1\30\1\0\1\30\1"+
    "\0\5\30\1\0\2\30\2\0\4\30\1\0\1\30\6\0\1\30\1\0\3\30\1\0\1\30\1\0\4\30\1\0"+
    "\13\30\1\0\3\30\1\0\5\31\2\0\6\30\1\0\7\30\1\0\1\30\15\0\1\30\1\0\15\31\1"+
    "\0\1\31\1\0\2\31\1\0\2\31\1\0\1\31\3\30\5\0\6\31\5\0\1\30\4\0\3\31\1\0\1\31"+
    "\3\0\3\30\7\31\4\0\2\30\1\31\13\30\1\0\1\30\7\31\2\30\2\31\1\0\4\31\2\30\2"+
    "\31\3\30\2\0\1\30\7\0\1\31\1\30\1\31\6\30\3\31\2\0\11\30\3\31\1\30\6\0\2\31"+
    "\6\30\4\31\2\30\2\0\2\31\1\30\11\31\1\30\3\31\1\30\5\31\2\0\1\30\3\31\4\0"+
    "\6\30\6\0\10\31\6\30\3\31\1\30\2\31\1\30\7\31\2\30\2\31\2\0\2\31\1\30\3\31"+
    "\1\0\10\30\2\0\2\30\2\0\6\30\1\0\7\30\1\0\1\30\3\0\4\30\2\0\1\31\1\30\7\31"+
    "\2\0\2\31\2\0\3\31\1\30\5\0\2\30\1\0\5\30\7\0\2\30\4\0\3\31\1\0\6\30\4\0\2"+
    "\30\1\0\2\30\1\0\2\30\1\0\2\30\2\0\1\31\1\0\5\31\4\0\2\31\2\0\3\31\3\0\1\31"+
    "\7\0\4\30\1\0\1\30\7\0\4\31\3\30\1\31\2\0\1\30\1\0\2\30\1\0\3\30\2\31\1\0"+
    "\3\31\2\0\1\30\10\0\1\30\6\31\2\0\1\31\1\30\1\0\6\30\3\0\3\30\1\0\4\30\3\0"+
    "\2\30\1\0\1\30\1\0\4\30\4\0\5\31\3\0\3\31\1\0\4\31\2\0\1\30\6\0\5\31\1\0\5"+
    "\30\3\0\1\30\7\31\1\0\2\31\5\0\2\31\1\0\4\30\1\0\3\30\1\0\2\30\5\0\3\30\2"+
    "\31\1\30\3\31\1\0\4\31\1\30\5\0\3\30\1\31\2\0\2\31\1\0\7\30\1\0\1\30\4\0\1"+
    "\31\4\0\6\31\1\0\1\31\3\0\2\31\4\0\1\30\1\31\2\30\7\31\4\0\10\30\10\31\1\0"+
    "\2\31\7\0\2\30\1\0\1\30\2\0\2\30\1\0\1\30\2\0\1\30\6\0\4\30\1\0\3\30\1\0\1"+
    "\30\1\0\1\30\2\0\2\30\1\0\3\30\2\31\1\0\2\31\1\30\2\0\5\30\1\0\1\30\1\0\2"+
    "\31\2\0\4\30\5\0\1\31\1\0\1\31\1\0\1\31\4\0\2\31\5\30\10\31\11\0\1\31\1\0"+
    "\7\31\1\30\2\31\4\30\3\31\1\30\3\31\2\30\7\31\3\30\4\31\5\30\14\31\1\30\1"+
    "\31\3\30\1\0\7\30\2\0\3\31\2\30\3\31\3\0\2\30\2\31\4\0\1\30\1\0\2\31\4\0\4"+
    "\30\10\31\3\0\1\30\3\0\2\30\1\31\5\0\4\31\1\0\5\30\2\31\2\30\1\31\1\30\5\0"+
    "\5\31\3\30\3\0\10\31\5\30\2\31\3\0\3\30\3\31\1\0\5\31\4\30\1\31\4\30\3\31"+
    "\2\30\3\31\1\0\5\31\1\0\1\30\1\0\1\30\1\0\1\30\1\0\1\30\2\0\3\30\1\0\6\30"+
    "\2\0\2\30\2\36\5\31\5\0\1\30\4\0\1\31\3\0\4\31\11\0\1\30\4\0\1\30\1\0\5\30"+
    "\2\0\1\30\1\0\4\30\1\0\3\30\2\0\4\30\5\0\5\30\4\0\1\30\4\0\4\30\3\31\2\30"+
    "\5\0\2\31\2\0\3\30\6\31\1\0\3\30\1\31\3\30\1\31\4\30\1\31\4\30\3\0\1\30\1"+
    "\0\1\30\2\0\5\30\1\31\2\30\2\31\5\30\1\0\4\30\2\31\4\0\1\30\3\31\2\30\1\31"+
    "\5\30\2\31\3\0\3\30\4\0\3\30\2\31\2\0\6\30\1\0\3\31\1\0\2\31\5\0\5\30\5\0"+
    "\1\30\1\31\3\30\1\0\2\30\1\0\7\30\2\0\1\31\6\0\2\30\2\0\3\30\3\0\2\30\3\0"+
    "\2\30\2\0\3\31\4\0\3\30\1\0\2\30\1\0\1\30\5\0\1\31\2\0\3\31\5\0\1\30\3\0\1"+
    "\30\2\0\4\30\1\0\2\30\2\0\1\30\3\31\1\0\2\31\1\0\5\30\2\31\1\0\3\31\2\0\1"+
    "\31\2\0\3\30\1\31\2\0\1\30\1\0\1\31\4\30\5\0\3\31\3\0\2\31\1\30\1\0\1\30\3"+
    "\0\4\31\2\30\1\0\1\30\1\31\3\0\1\30\3\0\2\30\3\0\5\31\1\30\4\31\3\0\6\31\1"+
    "\30\6\31\3\0\1\31\1\0\2\31\1\0\1\31\2\30\3\0\2\31\6\0\5\31\3\0\6\31\2\0\3"+
    "\31\2\0\4\31\4\0\1\30\2\0\2\30\2\0\4\30\1\0\4\30\1\0\1\30\1\0\6\30\2\0\5\30"+
    "\1\0\4\30\1\0\4\30\2\0\2\31\4\0\1\31\3\0\1\31\2\0\7\31\1\0\2\31\1\0\2\31\1"+
    "\0\1\30\1\0\1\30\5\0\1\30\1\0\1\30\1\0\3\30\1\0\3\30\1\0\3\30");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\6\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\4\11\1\12\1\1\1\13\1\14\1\15"+
    "\1\2\1\5\6\3\1\0\1\7\1\16\1\11\1\12"+
    "\1\16\1\17\1\20\5\3\1\0\1\7\1\12\1\3"+
    "\1\21\3\3\1\6\1\7\1\12\3\3\1\22\1\7"+
    "\1\12\1\23\1\3\1\24\1\7\1\12\2\3\1\7"+
    "\1\12\1\7\1\12\1\7\1\12";

  private static int [] zzUnpackAction() {
    int [] result = new int[83];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\204\0\245\0\306\0\347"+
    "\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\u01ce\0\u01ef"+
    "\0\u0210\0\u0129\0\u0129\0\u0231\0\u0252\0\u0273\0\u0294\0\u02b5"+
    "\0\u02d6\0\u02f7\0\u0318\0\u0339\0\u035a\0\u037b\0\u039c\0\u03bd"+
    "\0\u03de\0\u03ff\0\u0420\0\u0441\0\u0462\0\u0483\0\u04a4\0\u04c5"+
    "\0\u04e6\0\u0507\0\u0528\0\u0549\0\u056a\0\u058b\0\u0129\0\u018c"+
    "\0\u05ac\0\u05cd\0\u05ee\0\u060f\0\u0630\0\u0651\0\u0672\0\u0693"+
    "\0\u06b4\0\u018c\0\u06d5\0\u06f6\0\u0717\0\u04e6\0\u0738\0\u0759"+
    "\0\u077a\0\u079b\0\u07bc\0\u018c\0\u07dd\0\u07fe\0\u081f\0\u0840"+
    "\0\u018c\0\u0861\0\u0882\0\u08a3\0\u081f\0\u08c4\0\u08e5\0\u0906"+
    "\0\u0927\0\u0129\0\u0129";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[83];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\12\1\13\1\14\2\15\1\16\2\15\1\17\4\15"+
    "\1\20\2\15\1\21\3\15\1\22\1\12\1\23\1\15"+
    "\1\12\1\15\1\24\1\25\1\12\1\0\1\13\1\0"+
    "\1\12\1\26\1\13\22\27\2\12\1\23\1\27\1\12"+
    "\1\27\1\24\1\25\1\12\1\0\1\13\1\0\2\30"+
    "\1\13\24\30\1\23\2\30\1\31\1\32\1\33\2\30"+
    "\1\13\1\30\1\12\1\34\1\13\24\12\1\23\2\12"+
    "\1\35\1\24\1\25\1\12\1\0\1\13\1\0\2\12"+
    "\1\13\24\12\1\23\2\12\1\35\1\24\1\25\1\12"+
    "\1\0\1\13\1\0\2\12\1\13\22\36\2\12\1\23"+
    "\1\36\1\12\1\36\1\24\1\25\1\12\1\0\1\13"+
    "\1\0\2\12\1\13\22\37\2\12\1\23\1\37\1\12"+
    "\1\37\1\24\1\25\1\12\1\0\1\13\1\0\2\12"+
    "\1\13\22\40\2\12\1\23\1\40\1\12\1\40\1\24"+
    "\1\25\1\12\1\0\1\13\1\0\2\30\1\41\24\30"+
    "\1\42\2\30\1\31\1\32\1\33\2\30\1\41\1\30"+
    "\43\0\1\13\34\0\1\13\2\0\1\15\1\0\1\15"+
    "\1\43\1\44\17\15\3\0\3\15\5\0\1\15\1\0"+
    "\1\15\1\0\22\15\3\0\3\15\5\0\1\15\1\0"+
    "\1\15\1\0\4\15\1\45\15\15\3\0\3\15\5\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\46\20\15\3\0"+
    "\3\15\5\0\1\15\1\0\1\15\1\0\1\15\1\47"+
    "\20\15\3\0\3\15\5\0\1\15\1\0\1\15\1\0"+
    "\4\15\1\50\15\15\3\0\3\15\5\0\1\15\27\24"+
    "\1\0\11\24\35\0\1\51\4\0\1\52\40\0\1\27"+
    "\1\0\22\27\3\0\3\27\5\0\1\27\2\30\1\0"+
    "\24\30\1\0\7\30\1\0\3\30\1\0\22\53\2\30"+
    "\1\0\1\53\1\30\1\53\4\30\1\0\1\30\2\32"+
    "\1\24\24\32\1\0\7\32\1\24\1\32\2\30\1\0"+
    "\24\30\1\0\5\30\1\54\1\30\1\0\1\30\1\0"+
    "\1\55\42\0\22\56\3\0\1\56\1\0\1\56\7\0"+
    "\1\36\1\0\22\36\3\0\3\36\5\0\1\36\1\0"+
    "\1\37\1\0\22\37\3\0\3\37\5\0\1\37\1\0"+
    "\1\40\1\0\22\40\3\0\3\40\5\0\1\40\2\0"+
    "\1\13\23\0\1\57\10\0\1\13\27\0\1\57\13\0"+
    "\1\15\1\0\2\15\1\60\17\15\3\0\3\15\5\0"+
    "\1\15\1\0\1\15\1\0\13\15\1\61\6\15\3\0"+
    "\3\15\5\0\1\15\1\0\1\15\1\0\5\15\1\62"+
    "\14\15\3\0\3\15\5\0\1\15\1\0\1\15\1\0"+
    "\7\15\1\63\12\15\3\0\3\15\5\0\1\15\1\0"+
    "\1\15\1\0\21\15\1\64\3\0\3\15\5\0\1\15"+
    "\1\0\1\15\1\0\17\15\1\65\2\15\3\0\3\15"+
    "\5\0\1\15\27\51\1\0\5\51\1\66\4\0\1\67"+
    "\37\0\1\30\1\53\1\0\22\53\2\30\1\0\3\53"+
    "\4\30\1\0\1\53\2\54\1\51\24\54\1\0\6\54"+
    "\1\30\1\0\1\30\1\0\1\70\40\0\1\56\1\0"+
    "\22\56\3\0\3\56\5\0\1\56\1\0\1\15\1\0"+
    "\5\15\1\71\14\15\3\0\3\15\5\0\1\15\1\0"+
    "\1\15\1\0\2\15\1\72\17\15\3\0\3\15\5\0"+
    "\1\15\1\0\1\15\1\0\4\15\1\73\15\15\3\0"+
    "\3\15\5\0\1\15\1\0\1\15\1\0\1\15\1\74"+
    "\20\15\3\0\3\15\5\0\1\15\1\0\1\15\1\0"+
    "\13\15\1\75\6\15\3\0\3\15\5\0\1\15\27\51"+
    "\1\0\4\51\1\76\1\66\4\0\1\77\40\0\1\100"+
    "\40\0\1\15\1\0\14\15\1\101\5\15\3\0\3\15"+
    "\5\0\1\15\1\0\1\15\1\0\10\15\1\102\11\15"+
    "\3\0\3\15\5\0\1\15\1\0\1\15\1\0\4\15"+
    "\1\103\15\15\3\0\3\15\5\0\1\15\1\0\1\15"+
    "\1\0\20\15\1\104\1\15\3\0\3\15\5\0\1\15"+
    "\1\0\1\105\40\0\1\106\40\0\1\15\1\0\15\15"+
    "\1\107\4\15\3\0\3\15\5\0\1\15\1\0\1\15"+
    "\1\0\11\15\1\110\10\15\3\0\3\15\5\0\1\15"+
    "\1\0\1\15\1\0\2\15\1\111\17\15\3\0\3\15"+
    "\5\0\1\15\1\0\1\112\40\0\1\113\40\0\1\15"+
    "\1\0\12\15\1\114\7\15\3\0\3\15\5\0\1\15"+
    "\1\0\1\15\1\0\2\15\1\115\17\15\3\0\3\15"+
    "\5\0\1\15\1\0\1\116\40\0\1\117\40\0\1\15"+
    "\1\0\3\15\1\16\16\15\3\0\3\15\5\0\1\15"+
    "\1\0\1\120\40\0\1\121\40\0\1\122\40\0\1\123"+
    "\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2376];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\7\1\2\11\25\1\1\0\5\1\1\11"+
    "\6\1\1\0\33\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[83];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer = new char[0];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

	public PondLexer() {
    }

    public static int INDENT_SPACES = 2;

    private LinkedList<Token> tokens = new LinkedList<>();

    private void addToken(String text, int start, int end, int tokenType, int indent) {
        tokens.add(new Token(text, start, end, tokenType, indent));
        zzStartRead = zzMarkedPos;
    }

    private void addToken(int start, int end, int tokenType) {
        addToken(yytext(), start, end, tokenType, yyindent(start));
    }

    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos - 1, tokenType);
    }

    public final String yytext() {
        return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
    }


    public LinkedList<Token> getTokens(String text) {
        tokens.clear();
        try {
            yyreset(text);
            yybegin(0);
            yylex();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return tokens;
    }

    private boolean zzRefill() {
        return zzCurrentPos>=zzBuffer.length;
    }

    private int yyindent(int start) {
        if (start == zzBuffer.length) start--;
        int lastCharAt = start;
        for (int i = start; i > 0; i--) {
            char at = zzBuffer[i];
            if (at == '\n') {
                lastCharAt -= i + 1;
                break;
            }
            if (!Character.isWhitespace(at)) {
                lastCharAt = i;
            }
        }
        return lastCharAt / INDENT_SPACES;
    }

    public final void yyreset(String text) {
        zzBuffer = text.toCharArray();
        zzStartRead = 0;
        zzEndRead = zzStartRead + text.length() - 1;
        zzCurrentPos = zzMarkedPos = 0;
        zzLexicalState = YYINITIAL;
        zzAtBOL  = true;
        zzAtEOF  = false;
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PondLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(char[] buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                addToken(TokenTypes.EOF); return;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addToken(TokenTypes.UNEXPECTED);
            } 
            // fall through
          case 21: break;
          case 2: 
            { addToken(TokenTypes.WHITESPACE);
            } 
            // fall through
          case 22: break;
          case 3: 
            { if (Keyboard.INSTANCE.has(yytext())) {
              addToken(TokenTypes.KEY_NAME);
          } else { addToken(TokenTypes.KEY_INVALID); }
            } 
            // fall through
          case 23: break;
          case 4: 
            { addToken(TokenTypes.MACRO_INVOKE); yybegin(MACRO_INVOKE);
            } 
            // fall through
          case 24: break;
          case 5: 
            { addToken(TokenTypes.NEW_LINE); yybegin(YYINITIAL);
            } 
            // fall through
          case 25: break;
          case 6: 
            { addToken(TokenTypes.COMMENT);
            } 
            // fall through
          case 26: break;
          case 7: 
            { addToken(TokenTypes.LITERAL_NUMBER);
            } 
            // fall through
          case 27: break;
          case 8: 
            { addToken(TokenTypes.IDENTIFIER); yybegin(STRING);
            } 
            // fall through
          case 28: break;
          case 9: 
            { addToken(TokenTypes.LITERAL_STRING);
            } 
            // fall through
          case 29: break;
          case 10: 
            { addToken(TokenTypes.LITERAL_NUMBER); yybegin(YYINITIAL);
            } 
            // fall through
          case 30: break;
          case 11: 
            { addToken(TokenTypes.IDENTIFIER); yybegin(MACRO_ARGS);
            } 
            // fall through
          case 31: break;
          case 12: 
            { addToken(TokenTypes.IDENTIFIER);
            } 
            // fall through
          case 32: break;
          case 13: 
            { addToken(TokenTypes.IDENTIFIER); yybegin(MACRO_ARGS_INVOKE);
            } 
            // fall through
          case 33: break;
          case 14: 
            { addToken(TokenTypes.VARIABLE_USAGE);
            } 
            // fall through
          case 34: break;
          case 15: 
            { addToken(TokenTypes.MACRO_DIVIDER);
            } 
            // fall through
          case 35: break;
          case 16: 
            { addToken(TokenTypes.KEYWORD); yybegin(VARIABLE);
            } 
            // fall through
          case 36: break;
          case 17: 
            { addToken(TokenTypes.KEYWORD); yybegin(WAIT);
            } 
            // fall through
          case 37: break;
          case 18: 
            { addToken(TokenTypes.KEYWORD); yybegin(MACRO);
            } 
            // fall through
          case 38: break;
          case 19: 
            { addToken(TokenTypes.KEYWORD); yybegin(STRING);
            } 
            // fall through
          case 39: break;
          case 20: 
            { addToken(TokenTypes.KEYWORD); yybegin(REPEAT);
            } 
            // fall through
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
